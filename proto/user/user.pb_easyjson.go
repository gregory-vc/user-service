// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package user

import (
	json "encoding/json"
	types "github.com/gogo/protobuf/types"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jwt":
			out.Jwt = string(in.String())
		case "valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Jwt != "" {
		const prefix string = ",\"jwt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Jwt))
	}
	if in.Valid {
		const prefix string = ",\"valid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Token) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Token) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Token) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Token) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser1(in *jlexer.Lexer, out *AuthUserResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jwt":
			out.Jwt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser1(out *jwriter.Writer, in AuthUserResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Jwt != "" {
		const prefix string = ",\"jwt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Jwt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthUserResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthUserResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthUserResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthUserResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser1(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser2(in *jlexer.Lexer, out *AuthUserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser2(out *jwriter.Writer, in AuthUserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthUserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthUserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthUserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthUserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser2(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser3(in *jlexer.Lexer, out *ListUsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *User
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(User)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser3(out *jwriter.Writer, in ListUsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser3(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser4(in *jlexer.Lexer, out *ListUsersByIDsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]uint64, 0, 8)
					} else {
						out.Ids = []uint64{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 uint64
					v4 = uint64(in.Uint64())
					out.Ids = append(out.Ids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser4(out *jwriter.Writer, in ListUsersByIDsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Ids) != 0 {
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Ids {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUsersByIDsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUsersByIDsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUsersByIDsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUsersByIDsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser4(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser5(in *jlexer.Lexer, out *ListUsersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser5(out *jwriter.Writer, in ListUsersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Role != 0 {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUsersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUsersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUsersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUsersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser5(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser6(in *jlexer.Lexer, out *ID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser6(out *jwriter.Writer, in ID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser6(l, v)
}
func easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser7(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(types.Timestamp)
				}
				easyjson2c075341DecodeGithubComGogoProtobufTypes(in, &*out.CreatedAt)
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(types.Timestamp)
				}
				easyjson2c075341DecodeGithubComGogoProtobufTypes(in, &*out.UpdatedAt)
			}
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "service":
			out.Service = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser7(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Id))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2c075341EncodeGithubComGogoProtobufTypes(out, *in.CreatedAt)
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2c075341EncodeGithubComGogoProtobufTypes(out, *in.UpdatedAt)
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Service != "" {
		const prefix string = ",\"service\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Service))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComGregoryVcUserServiceProtoUser7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComGregoryVcUserServiceProtoUser7(l, v)
}
func easyjson2c075341DecodeGithubComGogoProtobufTypes(in *jlexer.Lexer, out *types.Timestamp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seconds":
			out.Seconds = int64(in.Int64())
		case "nanos":
			out.Nanos = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComGogoProtobufTypes(out *jwriter.Writer, in types.Timestamp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seconds != 0 {
		const prefix string = ",\"seconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Seconds))
	}
	if in.Nanos != 0 {
		const prefix string = ",\"nanos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Nanos))
	}
	out.RawByte('}')
}
